module 'Абстрактные модели'
  attr target_object: 'система'

const BIT8_DIV : Int := 128
const MAX_INT8 : Int := 127
const MIN_INT8 : Int := -128

const BIT16_DIV : Int := 32768
const MAX_INT16 : Int := 32767
const MIN_INT16 : Int := -32768

const BIT32_DIV : Int := 2147483648
const MAX_INT32 : Int := 2147483647
const MIN_INT32 : Int := -2147483648

const BIT64_DIV : Int := 9223372036854775808
const MAX_INT64 : Int := 9223372036854775807
const MIN_INT64 : Int := -9223372036854775808

type Exception:
enum
    x_none
    x_null
    x_bounds
    x_negsize
    x_store
    x_abstract
    x_arith
    x_cast
    x_classdef
    x_oom
    x_init
    x_call
    x_throw
    x_link
is
    **exceptions** - типы исключений
end

const NULL : void*

type Abstype : Int | Real | ref

object VM is
**VM** - многопоточная регистровая виртуальная машина
end
objattr classes: Clss-list is
**classes** - классы виртуальной машины
end
objattr methods: Method-list is
**methods** - статические методы
end
objattr fields: Abstype-list is
**fields** - статические поля
end 
objattr threads: Thread-list is
**Threads** - список потоков виртуальной машины
end
endobject

object Thread is
**Thread** - поток виртуальной машины
end
objattr frames: Frame-list is
**Frames** - список кадров потока виртуальной машины
end
objattr constpool : ref-list is
**Constpool** - список констант
end
objattr exception: Exception := x_none is
**Exception** - последнее исключение виртуальной машины
end
endobject

object Frame is
**Frame** - кадр
end
objattr registers: Register-list is
**Registers** - список регистров кадра
end
objattr acc: Register is
**Accumulator** - аккумулятор
end
objattr pc: Register is
**PC** - регистр адреса команды
end
endobject

type ref : void*


object Register is
**Register** - регистр общего назначения
end
objattr value: Int | Real | void* | ref is
**value** - значение регистра
end
objattr _type: RegType
endobject

object Method is
** Method ** - метод класса
objattr numargs: Int is
** кол-во аргументов метода **
end
objattr abstract: Bool is
**abstract** - абстрактный ли метод
end
objattr classid: Int is
**classid** - идентификатор класса
end
endobject

object Clss is
** Clss ** - класс
objattr method: Method-list is
**method** - методы класса
end
objattr init: Method is
**init** - инициализатор класса
end
objattr field: Abstype-list is
**field** - поля класса
end 
endobject



type RegType:
enum
    i8
    i16
    i32
    i64
    u1
    u8
    u16
    u32
    u64
    f32
    f64
is
**RegType** - тип регистра
end

logical to_int32_ptr
params
    T @TYPE
    r @IN : T*
    ret @OUT : Int*
function
    * to int ptr *
end

logical to_float_ptr
params
    T @TYPE
    r @IN : T*
    ret @OUT : Real*
function
    * to real ptr *
end

logical not
params
    r1 @IN : Int
    ret @OUT : Int
function
    * инвертирует биты параметра и возвращает результат*
end

logical and
params
    r1 @IN : Int
    r2 @IN : Int
    ret @OUT : Int
function
    * выполняет побитовое умножение двух параметров и возвращает результат*
end

logical or
params
    r1 @IN : Int
    r2 @IN : Int
    ret @OUT : Int
function
    * выполняет побитовое сложение двух параметров и возвращает результат*
end

logical xor
params
    r1 @IN : Int
    r2 @IN : Int
    ret @OUT : Int
function
    * выполняет побитовое исключащее или двух параметров и возвращает результат*
end

logical shr
params
    r1 @IN : Int
    r2 @IN : Int
    ret @OUT : Int
function
    * выполняет побитовый сдвиг первого параметра на r2 битов вправо и возвращает результат*
end

logical shl
params
    r1 @IN : Int
    r2 @IN : Int
    ret @OUT : Int
function
    * выполняет побитовый сдвиг первого параметра на r2 битов влево и возвращает результат*
end

logical ashr
params
    r1 @IN : Int
    r2 @IN : Int
    ret @OUT : Int
function
    * выполняет арифметический побитовый сдвиг первого параметра на r2 битов вправо и возвращает результат*
end

logical sizeof
params
    T @IN @TYPE
    ret @OUT : Int
end
    attr text: 'sizeof({T})'

logical new_array
params
    size @IN : Int
    r1 @IN : Int
    ret @OUT : void*
function
    * создает массив длины r2 типа T, либо возвращает NULL при недостатке памяти *
end

logical len
params
    T @TYPE
    r1 @IN : T*
    ret @OUT : Int
function
    * возвращает длину массива *
end

event noop //пустой инструкции
end

event movi //помещении значения на регистр
params
    
    
    
    r1 @IN : Register
    r2 @IN : Int | Real
function
    r1.value := r2
end

event mov //перемещении значений между регистрами
params
    
    
    
    r1 @IN : Register
    r2 @IN : Register
function
    r1.value := r2.value
end

event mov_null // помещении null на регистр
params
    
    
    
    r1 @IN : Register
function
    r1.value := NULL
end

event ldai // помещении значения на аккумулятор
params
    
    
    
    r1 @IN : Int | Real
function
    acc.value := r1
end

event lda // помещении значения регистра на аккумулятор
params
    
    
    
    r1 @IN : Register
function
    acc.value := r1.value
end

event lda_str
params
    
    
    
    id @IN : Int
function
    acc.value := constpool(id)
end

event lda_const
params
    
    
    
    id @IN : Int
function
    tmp = constpool(id)
    if(tmp == NULL){
        exception := x_oom
    }
    else{
        acc.value := tmp
    }
end

event lda_type
params
    
    
    
    id @IN : Int
function
    tmp = constpool(id)
    if(tmp == NULL){
        exception := x_link
    }
    else{
        acc.value := tmp
    }
end

event lda_null // помещении значение null на аккумулятор
function
    acc.value := NULL
end

event sta // помещении значения аккумулятора на регистр
params
    
    
    
    r1 @IN : Register
function
    r1.value := acc.value
end

event fcmp // float сравнении между регистром и аккумулятором и помещении результата на аккумулятор
params
    
    
    
    r1 @IN : Register
function
    if(acc.value < r1.value){
        acc.value := -1
    }
    else { 
        if(acc.value > r1.value){
            acc.value := 1
        }
        else{
            acc.value := 0
        }
    }
end

event cmp // целочисленном сравнении регистра и аккумулятора и помещении результата на аккумулятор
params
    
    
    
    r1 @IN : Register
function
    if(acc.value < r1.value){
        acc.value := -1
    }
    else { 
        if(acc.value > r1.value){
            acc.value := 1
        }
        else{
            acc.value := 0
        }
    }
end

event jmp // безусловном переходе на инструкцию, смещенную на n байт от текущей
params
    
    
    
    r1 @IN : Int
function
    pc.value := pc.value + r1
end

event jeq_obj // условном переходе по равенству на инструкцию, смещенную на n байт от текущей
params
    
    
    
    r1 @IN : ref
    r2 @IN : Int
function
    if(acc.value == r1){
        pc.value := pc.value + r2
    }    
end

event jne_obj // условном переходе по неравенству на инструкцию, смещенную на n байт от текущей
params
    
    
    
    r1 @IN : ref
    r2 @IN : Int
function
    if(acc.value != r1){
        pc.value := pc.value + r2
    }    
end

event jeqz_obj 
params
    
    
    
    r1 @IN : Int
function
    if(acc.value == NULL){
        pc.value := pc.value + r1
    }
end

event jnez_obj
params
    
    
    
    r1 @IN : Int
function
    if(acc.value != NULL){
        pc.value := pc.value + r1
    }
end

event jeqz
params
    
    
    
    r1 @IN : Int
function
    if(acc.value == 0){
        pc.value := pc.value + r1
    }
end

event jnez
params
    
    
    
    r1 @IN : Int
function
    if(acc.value != 0){
        pc.value := pc.value + r1
    }
end

event jltz
params
    
    
    
    r1 @IN : Int
function
    if(acc.value < 0){
        pc.value := pc.value + r1
    }
end

event jgtz
params
    
    
    
    r1 @IN : Int
function
    if(acc.value > 0){
        pc.value := pc.value + r1
    }
end

event jlez
params
    
    
    
    r1 @IN : Int
function
    if(acc.value <= 0){
        pc.value := pc.value + r1
    }
end

event jgez
params
    
    
    
    r1 @IN : Int
function
    if(acc.value >= 0){
        pc.value := pc.value + r1
    }
end

event jeq
params
    
    
    
    r1 @IN : Register
    r2 @IN : Int
function
    if(acc.value - r1.value == 0){
        pc.value := pc.value + r2
    }
end

event jne
params
    
    
    
    r1 @IN : Register
    r2 @IN : Int
function
    if(acc.value - r1.value != 0){
        pc.value := pc.value + r2
    }
end

event jlt
params
    
    
    
    r1 @IN : Register
    r2 @IN : Int
function
    if(acc.value - r1.value < 0){
        pc.value := pc.value + r2
    }
end

event jgt
params
    
    
    
    r1 @IN : Register
    r2 @IN : Int
function
    if(acc.value - r1.value > 0){
        pc.value := pc.value + r2
    }
end

event jle
params
    
    
    
    r1 @IN : Register
    r2 @IN : Int
function
    if(acc.value - r1.value <= 0){
        pc.value := pc.value + r2
    }
end

event jge
params
    
    
    
    r1 @IN : Register
    r2 @IN : Int
function
    if(acc.value - r1.value >= 0){
        pc.value := pc.value + r2
    }
end

event fneg // смене знака float значения аккумулятора
function
    acc.value := -acc.value
end

event neg // смене знака целочисленного значения аккумулятора
function
    acc.value := -acc.value
end

event not // инвертировании битов значения аккумулятора 
function
    acc.value := not(acc.value)     
end

event add2 // целочисленном сложении аккумулятора и регистра (32-битной разрядности)
params
    
    
    
    r1 @IN : Register
function
    acc.value := (acc.value + r1.value) % BIT32_DIV
end

event add2_64 // целочисленном сложении аккумулятора и регистра (64-битной разрядности)
params
    
    
    
    r1 @IN : Register
function
    acc.value := (acc.value + r1.value) % BIT64_DIV
end

event sub2 // целочисленном вычитании аккумулятора и регистра (32-битной разрядности)
params
    
    
    
    r1 @IN : Register
function
    acc.value := (acc.value - r1.value) % BIT32_DIV
end

event sub2_64 // целочисленном вычитании аккумулятора и регистра (64-битной разрядности)
params
    
    
    
    r1 @IN : Register
function
    acc.value := (acc.value - r1.value) % BIT64_DIV
end

event mul2 // целочисленном умножении аккумулятора и регистра (32-битной разрядности)
params
    
    
    
    r1 @IN : Register
function
    acc.value := (acc.value * r1.value) % BIT32_DIV
end

event mul2_64 // целочисленном умножении аккумулятора и регистра (64-битной разрядности)
params
    
    
    
    r1 @IN : Register
function
    acc.value := (acc.value * r1.value) % BIT64_DIV
end

event and2
params
    
    
    
    r1 @IN : Register
function
    acc.value := and(r1.value, acc.value) % BIT32_DIV
end

event and2_64
params
    
    
    
    r1 @IN : Register
function
    acc.value := and(r1.value, acc.value) % BIT64_DIV
end

event or2
params
    
    
    
    r1 @IN : Register
function
    acc.value := or(r1.value, acc.value) % BIT32_DIV
end

event or2_64
params
    
    
    
    r1 @IN : Register
function
    acc.value := or(r1.value, acc.value) % BIT64_DIV
end

event xor2
params
    
    
    
    r1 @IN : Register
function
    acc.value := xor(r1.value, acc.value) % BIT32_DIV
end

event xor2_64
params
    
    
    
    r1 @IN : Register
function
    acc.value := xor(r1.value, acc.value) % BIT64_DIV
end

event shl2
params
    
    
    
    r1 @IN : Register
function
    acc.value := shl(acc.value, r1.value) % BIT32_DIV
end

event shl2_64
params
    
    
    
    r1 @IN : Register
function
    acc.value := shl(acc.value, r1.value) % BIT64_DIV
end

event shr2
params
    
    
    
    r1 @IN : Register
function
    acc.value := shr(acc.value, r1.value) % BIT32_DIV
end

event shr2_64
params
    
    
    
    r1 @IN : Register
function
    acc.value := shr(acc.value, r1.value) % BIT64_DIV
end

event ashr2
params
    
    
    
    r1 @IN : Register
function
    acc.value := ashr(acc.value, r1.value) % BIT32_DIV
end

event ashr2_64
params
    
    
    
    r1 @IN : Register
function
    acc.value := ashr(acc.value, r1.value) % BIT64_DIV
end

event div2
params
    
    
    
    r1 @IN : Register
function
    if(acc.value == MIN_INT32 && r1.value == -1){
        acc.value := MIN_INT32
    }
    else{
        acc.value := acc.value / r1.value
    }
end

event div2_64
params
    
    
    
    r1 @IN : Register
function
    if(acc.value == MIN_INT64 && r1.value == -1){
        acc.value := 0
    }
    else{
        acc.value := acc.value / r1.value
    }
end

event divu2
params
    
    
    
    r1 @IN : Register
function
    if(acc.value == MIN_INT32 && r1.value == -1){
        acc.value := 0
    }
    else{
        acc.value := acc.value / r1.value
    }
end

event divu2_64
params
    
    
    
    r1 @IN : Register
function
    if(acc.value == MIN_INT64 && r1.value == -1){
        acc.value := MIN_INT64
    }
    else{
        acc.value := acc.value / r1.value
    }
end

event mod2
params
    
    
    
    r1 @IN : Register
function
    if(acc.value == MIN_INT32 && r1.value == -1){
        acc.value := 0
    }
    else{
        acc.value := acc.value % r1.value
    }
end

event mod2_64
params
    
    
    
    r1 @IN : Register
function
    if(acc.value == MIN_INT64 && r1.value == -1){
        acc.value := 0
    }
    else{
        acc.value := acc.value % r1.value
    }
end

event modu
params
    
    
    
    r1 @IN : Register
function
    acc.value := acc.value % r1.value
end

event modu64
params
    
    
    
    r1 @IN : Register
function
    acc.value := acc.value % r1.value
end

event divi
params
    
    
    
    r1 @IN : Int
function
    if(acc.value == MIN_INT32 && r1 == -1){
        acc.value := MIN_INT32
    }
    else{
        acc.value := acc.value / r1
    }
end

event modi
params
    
    
    
    r1 @IN : Int
function
    if(acc.value == MIN_INT32 && r1 == -1){
        acc.value := 0
    }
    else{
        acc.value := acc.value % r1
    }
end

event div
params
    
    
    
    r1 @IN : Register
    r2 @IN : Register
function
    if(r1.value == MIN_INT32 && r2.value == -1){
        acc.value := MIN_INT32
    }
    else{
        acc.value := r1.value / r2.value
    }
end

event mod
params
    
    
    
    r1 @IN : Register
    r2 @IN : Register
function
    if(r1.value == MIN_INT32 && r2.value == -1){
        acc.value := 0
    }
    else{
        acc.value := r1.value % r2.value
    }
end

event add // целочисленное сложение двух регистров
params
    
    
    
    r1 @IN : Register
    r2 @IN: Register
function
    acc.value := (r1.value + r2.value) % BIT32_DIV
end

event sub // целочисленное вычитание двух регистров
params
    
    
    
    r1 @IN: Register
    r2 @IN: Register
function
    acc.value := (r1.value - r2.value) % BIT32_DIV
end

event mul // целочисленное умножение двух регистров
params
    
    
    
    r1 @IN: Register
    r2 @IN: Register
function
    acc.value := (r1.value * r2.value) % BIT32_DIV
end

event or
params
    
    
    
    r1 @IN: Register
    r2 @IN: Register
function
    acc.value := or(r1.value, r2.value) % BIT32_DIV
end

event and
params
    
    
    
    r1 @IN: Register
    r2 @IN: Register
function
    acc.value := and(r1.value, r2.value) % BIT32_DIV
end

event xor
params
    
    
    
    r1 @IN: Register
    r2 @IN: Register
function
    acc.value := xor(r1.value, r2.value) % BIT32_DIV
end

event shl
params
    
    
    
    r1 @IN: Register
    r2 @IN: Register
function
    acc.value := shl(r1.value, r2.value) % BIT32_DIV
end

event shr
params
    
    
    
    r1 @IN: Register
    r2 @IN: Register
function
    acc.value := shr(r1.value, r2.value) % BIT32_DIV
end

event ashr
params
    
    
    
    r1 @IN: Register
    r2 @IN: Register
function
    acc.value := ashr(r1.value, r2.value) % BIT32_DIV
end

event addi // целочисленном сложении двух регистров
params
    
    
    
    r1 @IN: Int
function
    acc.value := (acc.value + r1) % BIT32_DIV
end

event subi // целочисленном вычитании двух регистров
params
    
    
    
    r1 @IN: Int
function
    acc.value := (acc.value - r1) % BIT32_DIV
end

event muli // целочисленном умножении двух регистров
params
    
    
    
    r1 @IN: Int
function
    acc.value := (acc.value * r1) % BIT32_DIV
end

event ori
params
    
    
    
    r1 @IN: Int
function
    acc.value := or(acc.value , r1) % BIT32_DIV
end

event andi
params
    
    
    
    r1 @IN: Int
function
    acc.value := and(acc.value , r1) % BIT32_DIV
end

event xori
params
    
    
    
    r1 @IN: Int
function
    acc.value := xor(acc.value , r1) % BIT32_DIV
end

event shli
params
    
    
    
    r1 @IN: Int
function
    acc.value := shl(acc.value , r1) % BIT32_DIV
end

event shri
params
    
    
    
    r1 @IN: Int
function
    acc.value := shr(acc.value , r1) % BIT32_DIV
end

event ashri
params
    
    
    
    r1 @IN: Int
function
    acc.value := ashr(acc.value , r1) % BIT32_DIV
end

event i32toi64 // расширении 32битного знакового значения к 64битному знаковому
params
    
    
    
    r1 @IN: Register
function
    r1._type := i64
end

event i64toi32 // приведении 64битного знакового значения к 32битному знаковому
params
    
    
    
    r1 @IN: Register
function
    r1._type := i32
    r1.value := r1.value % BIT32_DIV
end

event i32toi16 // приведении 32битного знакового значения к 16битному знаковому
params
    
    
    
    r1 @IN: Register
function
    r1._type := i16
    r1.value := r1.value % BIT16_DIV
end

event i16toi32 // расширении 16битного знакового значения к 32битному знаковому
params
    
    
    
    r1 @IN: Register
function
    r1._type := i32
end

event i32toi8 // приведении 32битного знакового значения к 8битному знаковому
params
    
    
    
    r1 @IN: Register
function
    r1._type := i8
    r1.value := r1.value % BIT8_DIV
end

event i32tou8 // приведении 32битного знакового значения к 8битному беззнаковому
params
    
    
    
    r1 @IN: Register
function
    r1._type := u8
    r1.value := r1.value % BIT8_DIV
end

event i32tou16 // приведение 32битного знакового значения к 16битному беззнаковому
params
    
    
    
    r1 @IN: Register
function
    r1._type := u16
    r1.value := r1.value % BIT16_DIV
end

event u32toi64 // расширение 32битного беззнакового значения к 64битному знаковому
params
    
    
    
    r1 @IN: Register
function
    r1._type := i64
end

event u32tou16 // приведении 32битного беззнакового значения к 16битному беззнаковому
params
    
    
    
    r1 @IN: Register
function
    r1._type := u16
    r1.value := r1.value % BIT16_DIV
end

event u32toi16 // приведении 32битного беззнакового значения к 16битному знаковому
params
    
    
    
    r1 @IN: Register
function
    r1._type := i16
    r1.value := r1.value % BIT16_DIV
end

event u32tou8 // приведении 32битного беззнакового значения к 8битному беззнаковому
params
    
    
    
    r1 @IN: Register
function
    r1._type := u8
    r1.value := r1.value % BIT8_DIV
end

event u32toi8 // приведении 32битного беззнакового значения к 8битному знаковому
params
    
    
    
    r1 @IN: Register
function
    r1._type := i8
    r1.value := r1.value % BIT8_DIV
end

event u64toi32 // приведении 64битного беззнакового значения к 32битному знаковому
params
    
    
    
    r1 @IN: Register
function
    r1._type := i32
    r1.value := r1.value % BIT32_DIV
end

event u64tou32 // приведении 64битного беззнакового значения к 32битному беззнаковому
params
    
    
    
    r1 @IN: Register
function
    r1._type := u32
    r1.value := r1.value % BIT32_DIV
end

event i32tou1 // приведении 32битного знакового значения к 1битному
function
    if(acc.value != 0){
        acc.value := 1
    }
    acc._type := u1
end

event i64tou1 // приведении 64битного знакового значения к 1битному
function
    if(acc.value != 0){
        acc.value := 1
    }
    acc._type := u1
end

event u32tou1 // приведении 32битного беззнакового значения к 1битному
function
    if(acc.value != 0){
        acc.value := 1
    }
    acc._type := u1
end

event u64tou1 // приведении 64битного беззнакового значения к 1битному 
function
    if(acc.value != 0){
        acc.value := 1
    }
    acc._type := u1
end

event inci // инкрементировании значения регистра на целочисленную константу
params
    
    
    
    r1 @IN: Register
    r2 @IN : Int
function
    r1.value := (r1.value + r2) % BIT32_DIV
end

logical casttof
params
    T @TYPE
    v @IN: T
    ret @OUT: Real
function
    * приведение к float * 
end

logical casttoi
params
    T @TYPE
    v @IN: T
    ret @OUT: Int
function
    * приведение к int * 
end

event casttoint
function
    acc.value := casttoi(acc.value)
end

event casttofloat
function
    acc.value := casttof(acc.value)
end

event newarr
params
    r1 @IN : Register
    r2 @IN : Register
    r3 @IN : Int
function
    r1.value := new_array(r3, r2.value)
end

event lenarr
params
    
    
    
    r1 @IN : Register
function
    acc.value := len(r1.value)
end

event ldarr_8
params
    
    
    
    r1 @IN: Register
function
    acc.value := to_int32_ptr(r1.value)[acc.value]
end

event ldarru_8
params
    
    
    
    r1 @IN: Register
function
    acc.value := to_int32_ptr(r1.value)[acc.value]
end

event ldarr_16
params
    
    
    
    r1 @IN: Register
function
    acc.value := to_int32_ptr(r1.value)[acc.value]
end

event ldarru_16
params
    
    
    
    r1 @IN: Register
function
    acc.value := to_int32_ptr(r1.value)[acc.value]
end

event ldarr
params
    
    
    
    r1 @IN: Register
function
    acc.value := to_int32_ptr(r1.value)[acc.value]
end

event ldarr_64
params
    
    
    
    r1 @IN: Register
function
    acc.value := to_int32_ptr(r1.value)[acc.value]
end

event fldarr_32
params
    
    
    
    r1 @IN: Register
function
    acc.value := to_float_ptr(r1.value)[acc.value]
end

event fldarr_64
params
    
    
    
    r1 @IN: Register
function
    acc.value := to_float_ptr(r1.value)[acc.value]
end

action add_to_list
params
    T @TYPE
    l @IN : T-list
    el   @IN : T
function 
    l(\len l) := el // !Добавить el в конец списка l
end

action del_from_list
params
    T @TYPE
    l @IN  : T-list
function
    * Удалить последний элемент из списка l.
end

logical make_reg_list
params
    ret @OUT: Register-list
function
    * возращает пустой список *
end

logical new_frame
params
    ret @OUT: Frame
function
    * создает и возращает новый фрейм*
end 

logical call_method1
params
    m @IN: Method
    
    
    
    v1 @IN: Register
    ret @OUT: Abstype
function
    * выполняет метод с параметром v1*
end

logical call_method2
params
    m @IN: Method
    
    
    
    v1 @IN: Register
    v2 @IN: Register
    ret @OUT: Abstype
function
    * выполняет метод с параметрами v1 и v2*
end

logical call_method3
params
    m @IN: Method
    
    
    
    v1 @IN: Register
    v2 @IN: Register
    v3 @IN: Register
    ret @OUT: Abstype
function
    * выполняет метод с параметрами v1 - v3*
end

logical call_method4
params
    m @IN: Method
    
    
    
    v1 @IN: Register
    v2 @IN: Register
    v3 @IN: Register
    v4 @IN: Register
    ret @OUT: Abstype
function
    * выполняет метод с параметрами v1 - v4*
end

event call_short
params
    
    
    
    mid @IN: Int
    v1 @IN: Register
    v2 @IN: Register
function
    method = methods(mid)
    frame = new_frame()
    add_to_list(frames, frame)
    acc.value := call_method2(method, v1, v2)
end

event call
params
    
    
    
    mid @IN: Int
    v1 @IN: Register
    v2 @IN: Register
    v3 @IN: Register
    v4 @IN: Register
function
    method = methods(mid)
    frame = new_frame()
    add_to_list(frames, frame)
    acc.value := call_method4(method, v1, v2, v3, v4)
end

event call_acc_short
params
    
    
    
    mid @IN: Int
    v1 @IN: Register
    v2 @IN: Int
function
    method = methods(mid)
    frame = new_frame()
    add_to_list(frames, frame)
    if(v2 == 1){
        acc.value := call_method2(method, v1, acc)
    }
    else{
        acc.value := call_method2(method, acc, v1)
    }
end
    attr algorithm: 'алгоритм call acc short'

event call_acc
params
    
    
    
    mid @IN: Int
    v0 @IN: Int
    v1 @IN: Register
    v2 @IN: Register
    v3 @IN: Register
    v4 @IN: Register
function
    method = methods(mid)
    frame = new_frame()
    add_to_list(frames, frame)
    if(v0 == 0){
        acc.value := call_method4(method, acc, v1, v2, v3)
    }
    elif(v0 == 1){
        acc.value := call_method4(method, v1, acc, v2, v3)
    }
    elif(v0 == 2){
        acc.value := call_method4(method, v1, v2, acc, v3)
    }
    else{
        acc.value := call_method4(method, v1, v2, v3, acc)
    }
end
    attr algorithm: 'алгоритм call acc'

event ret
function
    ret = acc.value
    del_from_list(frames)
    frames(\len frames - 1).acc.value := ret
end

event ret_void
function
    del_from_list(frames)
end

logical anytofunc
params
    t @IN: void
    ret @OUT: Method
function
    * преобразует любое значение в функцию*
end

event call_dyn_short
params
    
    
    
    m @IN: void
    v1 @IN: Register
    v2 @IN: Register
function
    method = anytofunc(m)
    frame = new_frame()
    add_to_list(frames, frame)
    acc.value := call_method2(method, v1, v2)
end

event call_dyn
params
    
    
    
    m @IN: void
    v1 @IN: Register
    v2 @IN: Register
    v3 @IN: Register
    v4 @IN: Register
function
    method = anytofunc(m)
    frame = new_frame()
    add_to_list(frames, frame)
    acc.value := call_method4(method,v1, v2, v3, v4)
end

event ldstatic
params
    
    
    
    v1 @IN: Int
function
    acc.value := fields(v1)
end

event ststatic
params
    
    
    
    v1 @IN: Int
function
    fields(v1) := acc.value
end

event starr
params
    
    
    
    v1 @IN: Register
    v2 @IN: Register
function
    if(v1.value == NULL){
        exception := x_null
    }
    elif(v2.value < 0 || v2.value >= len(v1.value)){
        exception := x_bounds
    }
    else{
        to_int32_ptr(v1.value)[v2.value] := acc.value
    }
end

event starr_obj
params
    
    
    
    v1 @IN: Register
    v2 @IN: Register
function
    if(v1.value == NULL){
        exception := x_null
    }
    elif(v2.value < 0 || v2.value >= len(v1.value)){
        exception := x_bounds
    }
    elif(!has_type(acc.value, to_int32_ptr(v1.value)[0])){
        exception := x_store
    }
    else{
        to_int32_ptr(v1.value)[v2.value] := acc.value
    }
end

//?
event throw
params
    
    
    
    v1 @IN: Register
function
    if(v1.value == NULL){
        exception := x_null
    }
end

logical elem_by_id
params
    T @TYPE
    l @IN: T-list
    id @IN: Int
    ret @OUT: T
function
    return l(id)
end

logical resolve_classid
params
    obj @IN: ref
    c @OUT: Int
function
    * возвращает идентификатор класса по его объекту*
end

logical has_type
params
    T1 @TYPE
    T2 @TYPE
    v1 @IN: T1
    v2 @IN: T2
    ret @OUT: Bool
function
    * возвращает false, если T1 не является v2 или T1 не является подтипом v2, иначе true*
end

event isinstance
params
    
    
    
    v0 @IN: Int
function
    if(acc.value != NULL && has_type(acc.value, v0)){
        acc.value := 1
    }
    else{
        acc.value := 0
    }
end

event checkcast
params
    
    
    
    v0 @IN: Int
function
    if(acc.value == NULL && has_type(acc.value, v0)){

    }
    else{
        exception := x_cast
    }
end

logical new_instance
params
    v0 @IN: Int
    ret @OUT: ref
function
    * создает объект типа v0, либо возращает NULL при x_oom*
end

event newobj
params
    
    
    
    v0 @IN: Register
    v1 @IN: Int
function
    v = new_instance(v1)
    if(v == NULL){
        exception := x_oom
    }
end

event ldobj
params
    
    
    
    v0 @IN: Register
    v1 @IN: Clss*
    v2 @IN: Int
function
    if(v1 == NULL){
        exception := x_null 
    }
    else{
        v0.value := v1.field(v2)
    }
end

event ldobj_v
params
    
    
    
    v1 @IN: Clss*
    v2 @IN: Int
function
    if(v1 == NULL){
        exception := x_null 
    }
    else{
        acc.value := v1.field(v2)
    }
end

event stobj
params
    
    
    
    v1 @IN: Clss*
    v2 @IN: Int
function
    if(v1 == NULL){
        exception := x_null
    }
    else{
        v1.field(v2) := acc.value
    }
end

event stobj_v
params
    
    
    
    v0 @IN: Register
    v1 @IN: Clss*
    v2 @IN: Int
function
    if(v1 == NULL){
        exception := x_null
    }
    else{
        v1.field(v2) := v0.value
    }
end

//BUG
//
//
//event call_virt_short
//params
//    
//    
//    
//    mid @IN: Int
//    v0 @IN: Int
//    v1 @IN: Register
//    v2 @IN: Register
//function
//    if(v1.value == NULL){
//        t.exception := x_null
//    }
//    else{
//        frame = new_frame()
//        add_to_list(t.frames, frame)
//        classid = resolve_classid(v1.value)
//        methd = v.classes(classid).method(mid)
//        if(methd.abstract){
//            t.exception := x_abstract
//        }
//        else{
//            acc.value := call_method1(methd, v, t, frame, v2)
//        }
//    }
//end

//event call_virt
//params
//    
//    
//    
//   mid @IN: Int
//    v0 @IN: Int
//    v1 @IN: Register
//    v2 @IN: Register
//    v3 @IN: Register
//    v4 @IN: Register
//function
//    if(v1.value == NULL){
//        t.exception := x_null
//    }
//    else{
//        frame = new_frame()
//        add_to_list(t.frames, frame)
//        classid = resolve_classid(v1.value)
//        methd = v.classes(classid).method(mid)
//        if(methd.abstract){
//            t.exception := x_abstract
//        }
//       else{
//            acc.value := call_method3(methd, v, t, frame, v2, v3, v4)
//        }
//    }
//end

//event call_virt_acc_short
//params
//    
//    
//    
//   mid @IN: Int
//   v1 @IN: Register
//    v2 @IN: Int
//function
//    methd = v.method(mid)
//    frame = new_frame()
//    add_to_list(t.frames, frame)
//    classid = resolve_classid(v1.value)
//    methd = v.classes(classid).method(mid)
//    if(methd.abstract){
//        t.exception := x_abstract
//    }
//    else{
//        acc.value := call_method1(methd, v, t, frame, acc)
//    }
//end
//    attr algorithm: 'алгоритм call virt acc short'

//event call_virt_acc
//params
//    
//    
//    
//    mid @IN: Int
//    v0 @IN: Int
//    v1 @IN: Register
//    v2 @IN: Register
//    v3 @IN: Register
//    v4 @IN: Register
//function
//    methd = v.method(mid)
//    frame = new_frame()
//    add_to_list(t.frames, frame)
//    classid = resolve_classid(v1.value)
//    methd = v.classes(classid).method(mid)
//    if(methd.abstract){
//        t.exception := x_abstract
//    }
//    else{
//        if(v0 == 0){
//            acc.value := call_method3(methd, v, t, frame, acc, v2, v3)
//        }
//        elif(v0 == 1){
//            acc.value := call_method3(methd, v, t, frame, v2, acc, v3)
//        }
//        else{
//            acc.value := call_method3(methd, v, t, frame, acc, v2, v3)
//        }
//    }
//end
//    attr algorithm: 'алгоритм call virt acc'

endmodule